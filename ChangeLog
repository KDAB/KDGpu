- v0.9.1
  - Fix compilation with some gcc versions
  - Resolve validation error when AccelerationStructures are not supported
- v0.9.0
  - Add support for explicit BindGroupPool
  - Add support for pushBindGroup / VK_KHR_push_descriptor
- v0.8.0
  - Add support for Immutable Samplers
  - Add support for YCbCr conversion on Sampler and TextureView
  - Add support for DmaBuf external handles and Texture format modifiers
  - Add support for host copies and layout transitions on Textures
  - KDXR OpenXR layer improvements
  - Examples ported to Android
  - Fix the way Vulkan extensions are handled internally
  - Various RenderPass refactorings and fixes
  - Graphics API polymorphism abstraction removed
- v0.7.0
  - Add support for BufferAdress retrieval
  - Add support for rasterizerDiscard and depthClamping on GraphicsPipeline
  - Add support for InputAttachments bind groups
  - Add support for Mesh shaders
  - Initial support for subpasses
  - Fixes for stereo/multiview handling:
    - FramebufferKey: account for viewCount and arrayLayers
    - Make it possible to specify array layer in RenderPassCommandRecorder
- v0.6.0
  - Add support for RayTracing VK_KHR_ray_tracing_pipeline
  - Android support
  - Update spdlog (1.14.1) and glm (1.0.1) dependencies
  - Add RayTracing and Order Independent examples
- v0.5.0
  - Introduce initial support for OpenXR via the KDXr library
  - Fix crash when trying to use with RenderDoc
  - Builds on Android
- v0.4.6
  - Vulkan 1.1 support
  - Partially bound BindGroup example
  - Make it possible to ignore specific Validation errors
- v0.4.5
  - Warn about missing Vulkan layers
  - Use std::exchange in move ctors
  - Support for specialization constants
- v0.4.4
  - Fix TextureOploadOptions/WaitForTextureOploadOptions logic and initialization
  - Handle now has operator < to allow std::map storage
  - doctest dependency fix when using local KDUtils package
- v0.4.3
  - Fix logging registry to check for existing logger before creation
  - Add createTextureFromExistingVkImage
  - Add range member to TextureOploadOptions and WaitForTextureOploadOptions
  - Add spdlog formatters for Handle types
- v0.4.2
  - Fix Validation Error about DeviceGroups
  - Introduce VulkanGraphicsApi::getMemoryStats()
- v0.4.1
  - Introduce MemoryHandle type to hold memory handles for Textures/Buffers
  - Use dedicated memory allocations for externally referenceable Textures/Buffers
- v0.4.0
  - Don't tie external semaphore/fence/memory handle support to CUDA
  - Remove KDGPU_CUDA define
  - Add functions to set object names to help with error validation
  - Fix wayland surface creation
  - Fix external memory creation
  - Add support for BindGroup indexing
- v0.3.2
  - Allow to specify user extensions when creating device
  - Use dedicated options to enable builds of KDGpuExample and KDGpuKDGui
- v0.3.1
  - Fix compilation with fmt-10
  - Only request device extensions that are available
- v0.3.0
  - Fixes to static builds
  - More work on external memory and semaphore support
  - Add support for timestamp queries for GPU performance tracking
  - Don't just assume support for VK_KHR_synchronization2
- v0.2.0
  - Allow static builds
  - Use vkCreateRenderPass2
  - Optionally allow CUDA interop
  - Add support for external semaphore and memory types
  - Add example showing how to sample from depth texture
  - Add example showing how to use stereo multiview (if supported)
  - Add commands to CommandRecorder for:
    - clearing color/depthstencil
    - clearing a buffer
    - updating a buffer
  - [Bugfix] VulkanRenderPassKey now uses samples and view count
- v0.1.0
  - Initial public pre-release
