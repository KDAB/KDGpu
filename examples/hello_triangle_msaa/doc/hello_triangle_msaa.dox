/*
  This file is part of KDGpu.

  SPDX-FileCopyrightText: 2023 Klar√§lvdalens Datakonsult AB, a KDAB Group company <info@kdab.com>

  SPDX-License-Identifier: MIT

  Contact KDAB at <info@kdab.com> for commercial licensing options.
*/

/**
    @page hello_triangle_msaa Hello Triangle MSAA
    @ingroup kdgpu-examples

    @brief This example shows how to enable multisample anti-aliasing.

    This example showcases the minimal changes needed to enable multisample anti-aliasing. Read the [Hello Triangle](#hello_triangle) example to see the differences.

    The first place to look is ``createRenderTarget``, where the MSAA texture and view are initialized. This function is called on initialization and on window resize.

       @snippet hello_triangle_msaa/hello_triangle_msaa.cpp 4

    This creates a texture and a view with the correct multisampling configuration and new dimensions, which we will attach to the render pass option struct (KDGpu::RenderPassCommandRecorderOptions). This texture is able to hold more information (samples) per texel. Additionally, we need to configure the render pass option struct to multisample, passing in the same number of samples we did for the texture above.

       @snippet hello_triangle_msaa/hello_triangle_msaa.cpp 2

    Notice that the render pass options contains two separate entries: one for ``view`` and one for ``resolveView``. The ``view`` is set to the multisample texture, which has extra sampling information. During an MSAA pass, though, the multisampled texture needs to have its extra information "resolved" into a final, regular texture: the ``resolveView``.

    Also configure the graphics pipeline (KDGpu::GraphicsPipelineOptions) to multisample:

       @snippet hello_triangle_msaa/hello_triangle_msaa.cpp 3

     Lastly, on each frame, update the ``resolveView`` with the swapchain view that we want to render to.

       @snippet hello_triangle_msaa/hello_triangle_msaa.cpp 1
*/
