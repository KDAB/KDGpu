/*
  This file is part of KDGpu.

  SPDX-FileCopyrightText: 2023 Klar√§lvdalens Datakonsult AB, a KDAB Group company <info@kdab.com>

  SPDX-License-Identifier: MIT

  Contact KDAB at <info@kdab.com> for commercial licensing options.
*/

/**
    @page multiview-stereo MultiviewStereo
    @ingroup kdgpu-examples

    @brief This example shows how to render to a stereo swapchain using the multiview extension.

    This example uses the multiview extension to process the same vertices multiple times and render simultaneously to two image layers of a stereo swapchain.
    This is useful in VR applications where it is necessary to render the same scene twice from different cameras. When a multiview render pass happens, the different renderings will be sent to a 2D array texture.
    In the shaders, you can differentiate between which pass you are rendering with ``gl_ViewIndex``.

    \section multiview_stereo_initialization Initialization

    We first by initializing a vertex buffer with 3 vertices to make up a triangle.

    @snippet multiview_stereo/multiview_stereo.cpp 1

    Next we load a shader that will make use of gl_ViewIndex to rotate the triangle either clockwise or counter-clockwise.

    @snippet multiview_stereo/multiview_stereo.cpp 2

    We will use a push constant to send a rotation angle to the shader.

    @snippet multiview_stereo/multiview_stereo.cpp 3

    Then we can create a pipeline and prepare RenderPassCommandRecorderOptions options for later recording.

    @snippet multiview_stereo/multiview_stereo.cpp 4

    @snippet multiview_stereo/multiview_stereo.cpp 5

    Since we want to render to a stereo swapchain, we need to override the Swapchain creation function to request 2 imageLayers

    @snippet multiview_stereo/multiview_stereo.cpp 6

    Finally, the recording of render commands go as follow:

    @snippet multiview_stereo/multiview_stereo.cpp 7

*/
